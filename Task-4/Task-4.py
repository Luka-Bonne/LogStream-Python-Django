import os


# Задание №1
print("Задание №1")
# 1)
list_compr = [num ** 2 for num in range(1, 11)]
print(list_compr)

# 2)
month_list = ["Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"]
dict_compr = {month_list[i]: i + 1 for i in range(len(month_list))}
print(dict_compr)

# 3)
bibl_tegs = ["Django", "FastAPI", "Numpy", "PYTHON", "Pandas", "FASTAPI", "Python", "random"]
list_compr_set = {bibl_tegs[i].lower() for i in range(len(bibl_tegs))}
print(list_compr_set)


# Задание №2
print("\n\nЗадание №2")
def fibonacci(n):
    yield 1
    first = 0
    second = 1
    for i in range(n):
        yield first + second
        first, second = second, first + second

n = int(input("Введите число (сколько первых чисел фибоначчи нужно вывести): "))
for fib in fibonacci(n):
    print(fib)


# Задание №3-4

# з-4
def some_decorator(func):
    def wrapper(*args, **kwargs):
        print(f'\nБыла вызвана функция {func.__name__} с позиционными параметрами {args} и именованными параметрами {kwargs}.\n')
        result = func(*args, **kwargs)
        return result
    return wrapper


# з-3
print("\n\nЗадание №3-4")
@some_decorator
def fun(text, file_name):
    with open(file_name, "a+", encoding="utf-8") as f:
        if os.stat(file_name).st_size != 0:
            f.write("\n")
        f.write(text)

        f.seek(0)
        for index, element in enumerate(f.readlines()):
            if index % 2 != 0:
                print(f'{index + 1}: {element}')


FILE_NAME = "for_task-3.txt"
TEXT = """Текст-рыба
С другой стороны консультация с широким активом способствует подготовки и реализации новых предложений. Идейные соображения высшего порядка, а также начало повседневной работы по формированию позиции позволяет выполнять важные задания по разработке системы обучения кадров, соответствует насущным потребностям. Идейные соображения высшего порядка, а также укрепление и развитие структуры представляет собой интересный эксперимент проверки системы обучения кадров, соответствует насущным потребностям. Не следует, однако забывать, что реализация намеченных плановых заданий представляет собой интересный эксперимент проверки дальнейших направлений развития.
Идейные соображения высшего порядка, а также начало повседневной работы по формированию позиции представляет собой интересный эксперимент проверки позиций, занимаемых участниками в отношении поставленных задач. Не следует, однако забывать, что сложившаяся структура организации играет важную роль в формировании модели развития. Повседневная практика показывает, что консультация с широким активом требуют определения и уточнения новых предложений. Задача организации, в особенности же укрепление и развитие структуры обеспечивает широкому кругу (специалистов) участие в формировании существенных финансовых и административных условий. Товарищи! новая модель организационной деятельности способствует подготовки и реализации позиций, занимаемых участниками в отношении поставленных задач.
Задача организации, в особенности же рамки и место обучения кадров влечет за собой процесс внедрения и модернизации модели развития. Повседневная практика показывает, что дальнейшее развитие различных форм деятельности требуют от нас анализа форм развития.
Задача организации, в особенности же сложившаяся структура организации играет важную роль в формировании позиций, занимаемых участниками в отношении поставленных задач. Таким образом сложившаяся структура организации способствует подготовки и реализации позиций, занимаемых участниками в отношении поставленных задач. Разнообразный и богатый опыт постоянное информационно-пропагандистское обеспечение нашей деятельности требуют от нас анализа позиций, занимаемых участниками в отношении поставленных задач. Товарищи! постоянное информационно-пропагандистское обеспечение нашей деятельности обеспечивает широкому кругу (специалистов) участие в формировании дальнейших направлений развития. Разнообразный и богатый опыт сложившаяся структура организации в значительной степени обуславливает создание форм развития.
Идейные соображения высшего порядка, а также реализация намеченных плановых заданий требуют определения и уточнения существенных финансовых и административных условий. Задача организации, в особенности же новая модель организационной деятельности способствует подготовки и реализации модели развития. С другой стороны постоянный количественный рост и сфера нашей активности требуют определения и уточнения соответствующий условий активизации. Идейные соображения высшего порядка, а также постоянное информационно-пропагандистское обеспечение нашей деятельности представляет собой интересный эксперимент проверки форм развития. С другой стороны постоянный количественный рост и сфера нашей активности позволяет оценить значение направлений прогрессивного развития. Значимость этих проблем настолько очевидна, что начало повседневной работы по формированию позиции требуют от нас анализа систем массового участия."""
TEXT_ADD = """Повседневная практика показывает, что постоянный количественный рост и сфера нашей активности представляет собой интересный эксперимент проверки дальнейших направлений развития. Повседневная практика показывает, что новая модель организационной деятельности позволяет выполнять важные задания по разработке новых предложений. Не следует, однако забывать, что консультация с широким активом представляет собой интересный эксперимент проверки форм развития. Идейные соображения высшего порядка, а также консультация с широким активом требуют от нас анализа существенных финансовых и административных условий. Разнообразный и богатый опыт постоянный количественный рост и сфера нашей активности требуют определения и уточнения существенных финансовых и административных условий."""

fun(TEXT_ADD, FILE_NAME)

# Задание №5*

class CardDeck:
    def __init__(self, iters_count):
        self.card_suit = ["Пик", "Червей", "Треф", "Бубен"]
        self.card_numb = ["2", "3", "4", "5", "6", "7", "8", "9", "10", "Валет", "Дама", "Король", "Туз"]
        self.cards = [num + " " + suit for suit in self.card_suit for num in self.card_numb]
        self.len = 52
        self.iters_count = iters_count
        self.count = 0

    def __iter__(self):
        return self

    def __next__(self):
        if self.count < self.iters_count and self.count < self.len:
            self.count += 1
            return self.cards[self.count - 1]
        raise StopIteration


cards = CardDeck(5)

for item in cards:
    print(item)
